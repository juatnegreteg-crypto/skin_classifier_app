import streamlit as st
import torch
import torch.nn as nn
import timm
import gdown
from torchvision import transforms
from PIL import Image
import numpy as np
import pandas as pd
import altair as alt
import os

# ==========================
# CONFIGURACI√ìN
# ==========================
st.set_page_config(page_title="Clasificador de Lesiones de Piel", page_icon="üß¨", layout="centered")
st.title("üß¨ Clasificador de Lesiones de Piel - EfficientNet-B3")
st.write("Sube una imagen de una lesi√≥n cut√°nea para clasificarla entre **7 tipos** del conjunto **HAM10000**.")

DEVICE = 'cuda' if torch.cuda.is_available() else 'cpu'
MODEL_PATH = "best_model.pth"
DRIVE_ID = "13L6nxHVSeMznr7okUVrguR86Dmxc7HLc"  # üëà Tu ID de Google Drive

# ==========================
# DESCARGAR MODELO DESDE GOOGLE DRIVE
# ==========================
@st.cache_resource
def download_model():
    if not os.path.exists(MODEL_PATH):
        with st.spinner("Descargando modelo desde Google Drive... ‚è≥"):
            url = f"https://drive.google.com/uc?id={DRIVE_ID}"
            gdown.download(url, MODEL_PATH, quiet=False)
    return MODEL_PATH

download_model()

# ==========================
# CLASES Y M√âTRICAS
# ==========================
class_names = ['akiec', 'bcc', 'bkl', 'df', 'mel', 'nv', 'vasc']
class_names_es = [
    'Queratosis act√≠nica (AKIEC)',
    'Carcinoma basocelular (BCC)',
    'Queratosis seborreica (BKL)',
    'Dermatofibroma (DF)',
    'Melanoma (MEL)',
    'Nevus (NV)',
    'Lesi√≥n vascular (VASC)'
]

metrics = {
    'akiec': {'precision': 0.73, 'recall': 0.70, 'f1': 0.71},
    'bcc': {'precision': 0.87, 'recall': 0.98, 'f1': 0.92},
    'bkl': {'precision': 0.89, 'recall': 0.84, 'f1': 0.86},
    'df': {'precision': 0.91, 'recall': 0.91, 'f1': 0.91},
    'mel': {'precision': 0.82, 'recall': 0.78, 'f1': 0.80},
    'nv': {'precision': 0.93, 'recall': 0.96, 'f1': 0.95},
    'vasc': {'precision': 0.87, 'recall': 0.93, 'f1': 0.90}
}

# ==========================
# CARGAR MODELO
# ==========================
@st.cache_resource
def load_model():
    model = timm.create_model('efficientnet_b3', pretrained=False, num_classes=len(class_names))
    checkpoint = torch.load(MODEL_PATH, map_location=DEVICE)
    model.load_state_dict(checkpoint['model_state_dict'])
    model = model.to(DEVICE)
    model.eval()
    return model

model = load_model()

# ==========================
# TRANSFORMACIONES
# ==========================
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

# ==========================
# INTERFAZ STREAMLIT
# ==========================
uploaded_file = st.file_uploader("üì§ Sube una imagen", type=['jpg', 'jpeg', 'png', 'bmp', 'tiff', 'gif', 'webp'])

if uploaded_file:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="üñºÔ∏è Imagen subida", use_column_width=True)

    with st.spinner("Analizando imagen... üî¨"):
        input_tensor = transform(image).unsqueeze(0).to(DEVICE)
        with torch.no_grad():
            outputs = model(input_tensor)
            probs = torch.softmax(outputs, dim=1).cpu().numpy()[0]
            pred_idx = np.argmax(probs)

    pred_class = class_names[pred_idx]
    pred_class_es = class_names_es[pred_idx]
    pred_prob = probs[pred_idx]

    # ==========================
    # RESULTADOS
    # ==========================
    st.subheader("üîç Resultado del an√°lisis")
    st.success(f"**Predicci√≥n:** {pred_class_es}")
    st.write(f"**Probabilidad:** {pred_prob*100:.2f}%")

    st.subheader("üìä M√©tricas del modelo (aproximadas):")
    st.write(f"**Precisi√≥n:** {metrics[pred_class]['precision']}")
    st.write(f"**Recall:** {metrics[pred_class]['recall']}")
    st.write(f"**F1-Score:** {metrics[pred_class]['f1']}")

    # ==========================
    # GR√ÅFICO
    # ==========================
    st.subheader("üìà Distribuci√≥n de probabilidades por clase:")
    prob_df = pd.DataFrame({
        'Clase': class_names_es,
        'Probabilidad (%)': probs * 100
    })
    chart = alt.Chart(prob_df).mark_bar().encode(
        x=alt.X('Probabilidad (%)', scale=alt.Scale(domain=[0, 100])),
        y=alt.Y('Clase', sort='-x'),
        color='Clase'
    )
    st.altair_chart(chart, use_container_width=True)

    # ==========================
    # DESCRIPCI√ìN CL√çNICA
    # ==========================
    descripciones = {
        'akiec': "Lesi√≥n precancerosa causada por exposici√≥n solar prolongada.",
        'bcc': "C√°ncer de piel com√∫n de crecimiento lento.",
        'bkl': "Lesi√≥n benigna que suele aparecer en adultos mayores.",
        'df': "Lesi√≥n cut√°nea benigna firme al tacto.",
        'mel': "C√°ncer agresivo que puede propagarse r√°pidamente.",
        'nv': "Lunar o mancha pigmentada generalmente benigna.",
        'vasc': "Lesi√≥n relacionada con vasos sangu√≠neos (angioma)."
    }
    st.info(f"ü©∫ {descripciones[pred_class]}")

    if st.button("üîÅ Subir otra imagen"):
        st.experimental_rerun()
